#!/usr/bin/ansible-playbook
#    use the following command and pass the VM password when prompted if no group_var proxmox-clusters-update.yaml present
#  ANSIBLE_CONFIG=../ansible.cfg ./create-cluster-admin.yaml -i ../hosts.yaml --ask-pass -c paramiko

- hosts: mastervms
  become: yes
  gather_facts: no
  vars:
    username: "user-a"
    ansible_python_interpreter: "/usr/bin/python"
  tasks:

    - name: Create devops-team cluster role binding
      shell: |
        cat <<EOF | kubectl apply -f -
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: devops-team
        subjects:
        - kind: User
          name: devops-team
          apiGroup: rbac.authorization.k8s.io
        roleRef:
          kind: ClusterRole
          name: cluster-admin
          apiGroup: rbac.authorization.k8s.io
        EOF


    - name: Create user keys
      shell: |
        mkdir -p /tmp/prometheus/user-certificate-request
        openssl genrsa -out  /tmp/prometheus/user-certificate-request/user.key 2048
        openssl req -new -key /tmp/prometheus/user-certificate-request/user.key -subj "/CN={{username}}/O=devops-team" -out /tmp/prometheus/user-certificate-request/user.csr

    - name: Delete previous csr if present
      shell: kubectl delete csr {{username}}
      ignore_errors: yes

    - name: Create and apply user csr object
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: certificates.k8s.io/v1beta1
        kind: CertificateSigningRequest
        metadata:
          name: {{username}}
        spec:
          usages:
            - client auth
          request: $(cat /tmp/prometheus/user-certificate-request/user.csr | base64 | tr -d '\n')
          groups:
            - system:authenticated
        EOF

    - name: Approve the certificate request
      shell: kubectl certificate approve {{username}}

    - name: Create user role binding
      shell: kubectl create rolebinding {{username}}-admin --namespace="default" --clusterrole=admin --user={{username}}

    - name: Wait until certificate is approved
      shell: kubectl get csr {{username}} -o=jsonpath='{.status.conditions[0].type}'
      delay: 3
      retries: 10
      register: wait_approval
      until: wait_approval.stdout.find("Approved") != -1

    - name: Extract the approved certificate
      shell: |
        echo "$(cat /etc/kubernetes/admin.conf | grep certificate-authority-data | xargs)" > /tmp/prometheus/user-certificate-request/cluster-cfg
        echo "client-certificate-data: $(kubectl get csr {{username}} -o=jsonpath='{.status.certificate}')" >> /tmp/prometheus/user-certificate-request/cluster-cfg
        echo "client-key-data: $(cat /tmp/prometheus/user-certificate-request/user.key | base64 | tr -d '\n')" >> /tmp/prometheus/user-certificate-request/cluster-cfg
        echo "server: https://{{ hostvars[inventory_hostname].ansible_host }}:6443" >> /tmp/prometheus/user-certificate-request/cluster-cfg

    - name: Copy the approved csr to build config
      fetch:
        src: "/tmp/prometheus/user-certificate-request/cluster-cfg"
        dest: "{{ inventory_hostname.split('cluster',1)[0] }}cluster-cfg"
        flat: yes

#    - name: Remove the file with approved certificate
#      shell: rm -rf /tmp/prometheus/user-certificate-request



- hosts: localhost
  become: no
  gather_facts: no
  vars:
    script_file: build_kube_config.sh
  tasks:
    - name: Recreate script file
      shell: |
        rm {{script_file}}
        echo '#!/bin/bash' > {{script_file}}
        chmod +x {{script_file}}
      ignore_errors: yes

    - name: Generate inventory YAML file
      blockinfile:
        path: "{{script_file}}"
        create: yes
        block: |
          yq() { ../local_resources/yq "$@"; }; export -f yq

          APPROVED_CSR=$(ls | grep '\-cfg' | tr '\r\n' ' ' )
          arr=($APPROVED_CSR)
          #echo $APPROVED_CSR

          # Create config file in yaml format
          echo "apiVersion: v1
          kind: Config
          preferences: {}" > config

          for i in "${!arr[@]}"; do
          #  echo " entry $i ${arr[$i]}"
            CLUSTER_NAME=$( echo "${arr[$i]}" | awk -F '-cfg' '{print $1}')
          #  echo $CLUSTER_NAME

            CLUSTER_SERVER=$(yq r "${arr[$i]}" server)
          #  echo $CLUSTER_SERVER

            CLUSTER_CA_DATA=$(yq r "${arr[$i]}" certificate-authority-data)
          #  echo $CLUSTER_CA_DATA

            CLIENT_CERT_DATA=$(yq r "${arr[$i]}" client-certificate-data)
          #  echo $CLIENT_CERT_DATA

            CLIENT_KEY_DATA=$(yq r "${arr[$i]}" client-key-data)
          #  echo $CLIENT_KEY_DATA

            # define clusters
            yq w -i config "clusters.[+]" "cluster"
            yq w -i config clusters["$i"].cluster.certificate-authority-data $CLUSTER_CA_DATA
            yq w -i config clusters["$i"].cluster.server $CLUSTER_SERVER
            yq w -i config clusters["$i"].name $CLUSTER_NAME

            # define contexts
            yq w -i config "contexts.[+]" "context"
            yq w -i config contexts["$i"].context.cluster $CLUSTER_NAME
            yq w -i config contexts["$i"].context.user $CLUSTER_NAME-user
            yq w -i config contexts["$i"].name $CLUSTER_NAME-user@$CLUSTER_NAME


            # define override current cotext
            yq w -i config current-context $CLUSTER_NAME-user@$CLUSTER_NAME

            # define users
            yq w -i config users["$i"].name  $CLUSTER_NAME-user
            yq w -i config users["$i"].user.client-certificate-data $CLIENT_CERT_DATA
            yq w -i config users["$i"].user.client-key-data $CLIENT_KEY_DATA
          done

          # override this with current user .kube config
          cp config ~/.kube/config
        marker: ''

    - name: Execute script
      shell: "./{{script_file}}"
      register: generate_script
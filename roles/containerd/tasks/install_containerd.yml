- name: Make sure containerd is stoped
  ansible.builtin.service:
    name: containerd
    state: stopped
  ignore_errors: yes


- name: Remove "containerd" package
  when: ansible_distribution == "Ubuntu"
  apt:
    name: containerd
    state: absent

- name: Remove dependencies that are no longer required
  when: ansible_distribution == "Ubuntu"
  apt:
    autoremove: yes

- name: Install containerd packages Ubuntu
  when: ansible_distribution == "Ubuntu"
  # GET VERSIONS for ubuntu #apt-cache madison containerd
  package:
    name: ['containerd={{ hostvars[inventory_hostname].kubernetes.cri_install_version }}']
    update_cache: yes
    state: present

- name: Start service httpd, if not started
  when: ansible_distribution == "Ubuntu"
  ansible.builtin.service:
    name: containerd
    state: started

- name: Add the overlay module
  community.general.modprobe:
    name: overlay
    state: present

- name: Add the br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Create 99-kubernetes-cri.conf. Setup required sysctl params, these persist across reboots.
  copy:
    dest: "/etc/sysctl.d/99-kubernetes-cri.conf"
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1

- name: Apply sysctl params without reboot
  shell: "sysctl --system"

# TODO with this , the kubeadm fails
#- name: Configure containerd
#  shell: "mkdir -p /etc/containerd && containerd config default | sudo tee /etc/containerd/config.toml"
#
#
#- name: To use the systemd cgroup driver in /etc/containerd/config.toml with runc
#  ansible.builtin.lineinfile:
#    path: /etc/containerd/config.toml
#    state: present
#    regexp: '^    systemd_cgroup'
#    line: '    systemd_cgroup = true'
#
#- name: Restart containerd
#  ansible.builtin.service:
#    name: containerd
#    state: restarted
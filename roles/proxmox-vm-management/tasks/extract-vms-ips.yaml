- set_fact:
    clusterids: {}

- name: Get cluster vm ids
  shell: |
    qm list | grep {{ hostvars[item].inventory_hostname }} | awk '{print $1}'
  register: cluster_vmids_command
  with_items:
    - "{{ groups['clusters'] }}"
- name: cluster_vmids_command
  debug: var=cluster_vmids_command

- name: Set fact cluster ids
  set_fact:
    clusterids: >
      {{ clusterids |
         combine(
           { item.item: item.stdout_lines }
         )
      }}
  with_items:
    - "{{ cluster_vmids_command.results }}"
- name: clusterids
  debug: var=clusterids

- name: Get node DHCP assigned IP
  shell: |
    {% set cluster_vmid_list=clusterids.get(hostvars[item].inventory_hostname) -%}
    printf "" > {{ hostvars[item].inventory_hostname }}-hosts
    export VM_PASS={{group_vars_proxmox_vm_password}}
    {% for vmid in cluster_vmid_list %}
      export VM_ID={{vmid}}
      vm_dns_name="$(qm list | grep $VM_ID | awk '{print $2}')"
      vm_ip=$(expect -c '
              log_user 0
              spawn qm terminal $::env(VM_ID)
              expect "*"
              send "\r"
              expect "login: "
              send "root\n"
              expect "*: "
              send "$::env(VM_PASS)\n"
              expect "#"
              send "ip a | grep --color=never 192\r"
              expect -re "\n(\[^\r]*)\r"
              send_user "$expect_out(buffer)\n"
              send "exit\r"
              expect "logout"
              exit
            ' | awk '{print $2}' | grep -oP "192.168(.*)/"| rev | cut -c 2- | rev )
      echo "$vm_ip $vm_dns_name" >> {{ hostvars[item].inventory_hostname }}-hosts
    {% endfor %}
  register: extract_ip_command
  with_items:
    - "{{ groups['clusters'] }}"
#- debug: var=extract_ip_command

- name: Copy hosts ip files to local server
  fetch:
    src: "{{ hostvars[item].inventory_hostname }}-hosts"
    dest: "local_resources/{{ hostvars[item].inventory_hostname }}-hosts"
    flat: yes
  with_items:
    - "{{ groups['clusters'] }}"
---
- set_fact:
    workerids: {}

- name: Get worker nodes ids
  shell: "qm list | grep {{ hostvars[item].inventory_hostname }}-worker-node | awk '{print $1}'"
  register: worker_nodes_ids_command
  with_items:
    - "{{ groups['nodepools'] }}"
- debug: var=worker_nodes_ids_command

- name: Set fact worker ids
  set_fact:
    workerids: >
      {{ workerids |
         combine(
           { item.item+'-worker-node-vmids': item.stdout_lines }
         )
      }}
  with_items:
    - "{{ worker_nodes_ids_command.results }}"
- debug: var=workerids

- name: Provision worker VMs if count has been increased
  shell: |
    {% set nodeids=workerids.get(hostvars[item].inventory_hostname+'-worker-node-vmids') -%}
    {% set missingnodes=hostvars[item].count - workerids.get(hostvars[item].inventory_hostname+'-worker-node-vmids')|length -%}
    {% if nodeids|length < hostvars[item].count -%}
      echo "MUST CREATE {{ missingnodes }} NODES for {{ hostvars[item].inventory_hostname }} "
      {% for i in range(missingnodes) %}
         export VM_ID=$(pvesh get /cluster/nextid)
         qm clone "{{ hostvars[item].proxmox_template_id }}" $VM_ID \
            --description "{{ hostvars[item].inventory_hostname }} worker node" \
            --name {{ hostvars[item].inventory_hostname }}-worker-node-$VM_ID
         qm set $VM_ID \
               --net0 virtio,bridge=vmbr0,firewall=0\
               --memory {{ hostvars[item].memory_MB }} \
               --cores {{ hostvars[item].cpu_cores }} \
               --autostart true \
               --serial0 socket
         qm set $VM_ID -onboot 1
         qm start $VM_ID
      {% endfor %}
    {% else -%}
      echo "Nothing to add for {{ hostvars[item].inventory_hostname }} "
    {% endif -%}
  register: create_workers_command
  with_items:
    - "{{ groups['nodepools'] }}"
- debug: var=create_workers_command.stdout_lines
